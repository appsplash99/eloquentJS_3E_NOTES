Expressions and statements - 
A fragment of code that produces a value is called an expression.
A statement stands on its own, 
so it amounts to something only if it affects the world. 
It could display something on the screen—that counts as changing the world—
or it could change the internal state of the machine
in a way that will affect the statements that come after it. 
These changes are called side effects. 

In some cases, JavaScript allows you to omit the semicolon at the end of a statement.
In other cases, it has to be there, or the next line will be treated as part of the same statement.    


Bindings - 
To catch and hold values, JavaScript provides a thing called a binding, or variable:
    let caught = 5 * 5;
The special word (keyword) let indicates that this sentence is going to define a binding.
The previous statement creates a binding called caught and 
uses it to grab hold of the number that is produced by multiplying 5 by 5.

You should imagine bindings as tentacles, rather than boxes. 
They do not contain values; they grasp them—two bindings can refer to the same value.

A single let statement may define multiple bindings. 
The definitions must be separated by commas.
    let one = 1, two = 2;
    console.log(one + two);
    // → 3

The words var and const can also be used to create bindings, 
in a way similar to let.
    var name = "Ayda";
    const greeting = "Hello ";
    console.log(greeting + name);
    // → Hello Ayda
The first, var (short for “variable”), 
is the way bindings were declared in pre-2015 JavaScript.
The word const stands for constant. 


Binding names - 
A binding name name must not start with a digit,
may include dollar signs ($) or underscores (_) 
but no other punctuation or special characters.


The environment - 
The collection of bindings and their values,
that exist at a given time is called the environment.
For example, in a browser, 
there are functions to interact with the currently loaded website 
and to read mouse and keyboard input.


Functions -
A lot of the values provided in the default environment have the type function.
A function is a piece of program wrapped in a value.

Executing a function is called invoking, calling, or applying it.
You can call a function by putting parentheses,
after an expression that produces a function value.
Values given to functions are called arguments.


The console.log function -
Most JavaScript systems (including all modern web browsers and Node.js),
provide a console.log function ,
that writes out its arguments to some text output device. 
In browsers, the output lands in the JavaScript console.


Return values-
Showing a dialog box or writing text to the screen is a side effect.
When a function produces a value, it is said to return that value.


Control flow-
When your program contains more than one statement, 
the statements are executed as if they are a story, from top to bottom.


Conditional execution-
Conditional execution is created with the if keyword in JavaScript. 


WHILE AND DO LOOPS-
A statement starting with the keyword while creates a loop.
The word while is followed by an expression in parentheses and
then a statement, much like if. 

A do loop is a control structure similar to a while loop. 
It differs only on one point: a do loop always executes its body at least once,
and it starts testing whether it should stop only after that first execution. 
To reflect this, the test appears after the body of the loop.
    let yourName;
    do {
      yourName = prompt("Who are you?");
    } while (!yourName);
    console.log(yourName);
This program will force you to enter a name. 
It will ask again and again until it gets something that is not an empty string.
Applying the ! operator will convert a value to Boolean type before negating it,
and all strings except "" convert to true. 
This means the loop continues going round until you provide a non-empty name.


INDENTING CODE-
The role of this indentation inside blocks-
is to make the structure of the code stand out.
With proper indentation, 
the visual shape of a program corresponds to the shape of the blocks inside it. 
I like to use two spaces for every open block, 
but tastes differ—some people use four spaces, 
and some people use tab characters. 


FOR LOOPS-
    for (let number = 0; number <= 12; number = number + 2) {
      console.log(number);
    }
    // → 0
    // → 2
    //   … etcetera
The parentheses after a for keyword must contain two semicolons. 
The part before the first semicolon initializes the loop, 
usually by defining a binding. 
The second part is the expression that checks whether the loop must continue. 
The final part updates the state of the loop after every iteration. 
In most cases, this is shorter and clearer than a while construct.


BREAKING OUT OF A LOOP-
There is a special statement called 'break',
that has the effect of immediately jumping out of the enclosing loop.

This program illustrates the break statement. 
It finds the first number:
that is both greater than or equal to 20 and divisible by 7.
    for (let current = 20; ; current = current + 1) {
      if (current % 7 == 0) {
        console.log(current);
        break;
      }
    }
    // → 21
Using the remainder (%) operator 
is an easy way to test whether a number is divisible by another number.
If it is, the remainder of their division is zero.

If you were to remove that break statement or
you accidentally write an end condition that always produces true,
your program would get stuck in an infinite loop.

The 'continue' keyword is similar to break,
in that it influences the progress of a loop. 
When continue is encountered in a loop body, 
control jumps out of the body and continues with the loop’s next iteration.


UPDATING BINDINGS SUCCINCTLY-
JS shortcut to update binding for the below code:
    counter = counter + 1;
is
    counter+=1;
Similar shortcuts work for many other operators, 
such as result *= 2 to double result or counter -= 1 to count downward.


DISPATCHING ON A  VALUE WITH SWITCH-
    switch (prompt("What is the weather like?")) {
      case "rainy":
        console.log("Remember to bring an umbrella.");
        break;
      case "sunny":
        console.log("Dress lightly.");
      case "cloudy":
        console.log("Go outside.");
        break;
      default:
        console.log("Unknown weather type!");
        break;
    }
You may put any number of case labels inside the block opened by switch. 
The program will start executing at the label
that corresponds to the value that switch was given, 
or at default if no matching value is found. 
It will continue executing, even across other labels, 
until it reaches a break statement. 
In some cases, such as the "sunny" case in the example, 
this can be used to share some code between cases 
(it recommends going outside for both sunny and cloudy weather). 
But be careful—it is easy to forget such a break, 
which will cause the program to execute code you do not want executed.


CAPITALISATION-
use CamelCase 


COMMENTS-
At other times, you might just want to include 
some related thoughts as part of your program. 
This is what comments are for.

A comment is a piece of text 
that is part of a program but is completely ignored by the computer.

To write a single-line comment, 
you can use two slash characters (//) and then the comment text after it.
// It's a little valley, foaming like light in a glass.

Multi-line comment:
A section of text between /* and */ will be ignored in its entirety, 
regardless of whether it contains line breaks. 
/*
  I first found this number scrawled on the back of an old notebook.
  Since then, it has often dropped by, showing up in phone numbers
  and the serial numbers of products that I've bought. It obviously
  likes me, so I've decided to keep it.
*/


EXERCISES:
1. Looping a triangle

for (let i=1; i<=7; i++) {
  let hash = ''
  for (let j=0; j<i; j++) {    
    hash+='#'
  }
  console.log(hash)
}


2. FIZZBUZZ
for (let i=1; i<=100; i++) {
  i%3===0 && i%5===0 ?
    console.log("FizzBuzz") : i%3===0 ? 
      console.log("Fizz") : i%5===0 ?
        console.log("Buzz") : console.log(i)
}


3. CHESSBOARD

for (let i=1; i<=8; i++) {
  let fullLine = '';
  let repeater;
  if (i%2!==0) {
    repeater = ' #';
  } else {
    repeater = '# ';
  }
  for (let j=1; j<=4; j++) {
    fullLine+=(repeater);
  }
  console.log(fullLine);
}